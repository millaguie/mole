{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MOLE NIDS \u00b6 Mole IDS is a lightweight Network Intrusion Detection System powered with Yara . Mole IDS is a command line tool that is able to capture the network traffic and analyze it based on Yara rules. The Yara rules used in Mole IDS are barely crafted for Mole IDS.","title":"Welcome"},{"location":"#mole-nids","text":"Mole IDS is a lightweight Network Intrusion Detection System powered with Yara . Mole IDS is a command line tool that is able to capture the network traffic and analyze it based on Yara rules. The Yara rules used in Mole IDS are barely crafted for Mole IDS.","title":"MOLE NIDS"},{"location":"writing-rules/","text":"Writting rules \u00b6 Mole IDS rule system is built on top of yara. You can find information about writting basic yara rules Syntax \u00b6 With Mole IDS we will be able to match network packets payloads instead of file payloads, that means we will need to use Yara in a different way. When you use Yara to find patterns on files you mainly define the strings section and the condition one. Well, in Mole IDS, you will need to use the meta section as well. The meta section will help Mole IDS to determine when the rule must be executed and match the defined pattern. Moreover, think for a moment that Mole IDS will execute Yara rules for a stream of data, which means it has a variable length or the order is not always the same. Extra meta fields \u00b6 As said before, there are some key entries in the meta section that defined how the rule have to be executed based on the traffic. uuid \u00b6 Mole IDS does not use it at the moment. It is there for future purposes. type \u00b6 Type of event. Possible values: alert log block Warning At the moment Mole IDS only manages alerts so the unique type that is recognized by Mole IDS right now is \u00e1lert\u00b4. proto \u00b6 proto stands for protocol and it defines either network or transport protocols. The Yara rules associated to that protocol will be elected among others to be executed when all conditions are met. Possible values: Network \u00b6 IP Transport \u00b6 TCP UDP SCTP proto accepts the negation operator ( ! ). This operator can be used at the begining of the sting and its function is to negate the value. For example a rule defined like proto = \"!tcp\" will be executed on the following protocols IP, UDP, and SCTP . Warning Mole IDS only recognize the following protocols: IP TCP UDP SCTP src \u00b6 Origin address of the packet. It must be an ip address, list of ip address or range of ip addresses. Example values: 192.168.0.1 192.168.0.1/32 192.168.0.0/24 192.168.0.1,192.168.0.2 src also accepts the negation operator ( ! ). You can use it like this !192.168.0.1,192.168.0.2 and Mole IDS will match traffic comming from any address but not from those two. sport \u00b6 Origin port of the packet. It can be a port, a list of ports or a range of ports. Example values: 1234 10:100 1,2,3 sport also supports the negation operator ( ! ). An example of using the negation operation sport = \"!80,443\" . dst \u00b6 Destination address of the packet. It must be an ip address, list of ip address or range of ip addresses. dport \u00b6 Destination port of the packet. It can be a port, a list of ports or a range of ports. Variables \u00b6 Variables are handy utility for writing more generic rules or rules that can be addapted to other environmentes esaly. Variables are defined in the configuration file under the rules section . They are basically a set of key:value . This variables can be only used in the meta section and Mole IDS has some variables already defined and they can not be overwrite, those are: $tcp = tcp $udp = udp $sctp = sctp Finally, there is a variable called any that can be used to define any soruce or destination address as wel as any source or destination port. Examples \u00b6 Following several rule examples. Example 1 \u00b6 rule ExampleRule { meta: description = \"Port range from 1 to 1024\" type = \"alert\" proto = \"tcp\" src = \"any\" sport = \"any\" dst = \"any\" dport = \"1:1024\" strings: $dnp3_header = { 05 64 } $unsolicited_response = { 82 } condition: $dnp3_header at 0 and $unsolicited_response at 12 and #dnp3_header < 2 }","title":"Writing rules"},{"location":"writing-rules/#writting-rules","text":"Mole IDS rule system is built on top of yara. You can find information about writting basic yara rules","title":"Writting rules"},{"location":"writing-rules/#syntax","text":"With Mole IDS we will be able to match network packets payloads instead of file payloads, that means we will need to use Yara in a different way. When you use Yara to find patterns on files you mainly define the strings section and the condition one. Well, in Mole IDS, you will need to use the meta section as well. The meta section will help Mole IDS to determine when the rule must be executed and match the defined pattern. Moreover, think for a moment that Mole IDS will execute Yara rules for a stream of data, which means it has a variable length or the order is not always the same.","title":"Syntax"},{"location":"writing-rules/#extra-meta-fields","text":"As said before, there are some key entries in the meta section that defined how the rule have to be executed based on the traffic.","title":"Extra meta fields"},{"location":"writing-rules/#uuid","text":"Mole IDS does not use it at the moment. It is there for future purposes.","title":"uuid"},{"location":"writing-rules/#type","text":"Type of event. Possible values: alert log block Warning At the moment Mole IDS only manages alerts so the unique type that is recognized by Mole IDS right now is \u00e1lert\u00b4.","title":"type"},{"location":"writing-rules/#proto","text":"proto stands for protocol and it defines either network or transport protocols. The Yara rules associated to that protocol will be elected among others to be executed when all conditions are met. Possible values:","title":"proto"},{"location":"writing-rules/#network","text":"IP","title":"Network"},{"location":"writing-rules/#transport","text":"TCP UDP SCTP proto accepts the negation operator ( ! ). This operator can be used at the begining of the sting and its function is to negate the value. For example a rule defined like proto = \"!tcp\" will be executed on the following protocols IP, UDP, and SCTP . Warning Mole IDS only recognize the following protocols: IP TCP UDP SCTP","title":"Transport"},{"location":"writing-rules/#src","text":"Origin address of the packet. It must be an ip address, list of ip address or range of ip addresses. Example values: 192.168.0.1 192.168.0.1/32 192.168.0.0/24 192.168.0.1,192.168.0.2 src also accepts the negation operator ( ! ). You can use it like this !192.168.0.1,192.168.0.2 and Mole IDS will match traffic comming from any address but not from those two.","title":"src"},{"location":"writing-rules/#sport","text":"Origin port of the packet. It can be a port, a list of ports or a range of ports. Example values: 1234 10:100 1,2,3 sport also supports the negation operator ( ! ). An example of using the negation operation sport = \"!80,443\" .","title":"sport"},{"location":"writing-rules/#dst","text":"Destination address of the packet. It must be an ip address, list of ip address or range of ip addresses.","title":"dst"},{"location":"writing-rules/#dport","text":"Destination port of the packet. It can be a port, a list of ports or a range of ports.","title":"dport"},{"location":"writing-rules/#variables","text":"Variables are handy utility for writing more generic rules or rules that can be addapted to other environmentes esaly. Variables are defined in the configuration file under the rules section . They are basically a set of key:value . This variables can be only used in the meta section and Mole IDS has some variables already defined and they can not be overwrite, those are: $tcp = tcp $udp = udp $sctp = sctp Finally, there is a variable called any that can be used to define any soruce or destination address as wel as any source or destination port.","title":"Variables"},{"location":"writing-rules/#examples","text":"Following several rule examples.","title":"Examples"},{"location":"writing-rules/#example-1","text":"rule ExampleRule { meta: description = \"Port range from 1 to 1024\" type = \"alert\" proto = \"tcp\" src = \"any\" sport = \"any\" dst = \"any\" dport = \"1:1024\" strings: $dnp3_header = { 05 64 } $unsolicited_response = { 82 } condition: $dnp3_header at 0 and $unsolicited_response at 12 and #dnp3_header < 2 }","title":"Example 1"},{"location":"getting-started/concepts/","text":"Concepts \u00b6 Everything You Need to Know We are sure most of the Mole users already know mostly everything regarding Network Intrusion Detection Systems, as well as the network patterns to capture network traffic. However, people camming in to cybersecurity may need some initial guiadence to start capturing traffic. Mode IDS is an application that reads network traffic in a promiscuous way, that means Mole IDS can read network traffic even when that traffic is not addressed to be read by Mole IDS. That can be achieved first by configuring the netwotk addapter in monitor mode (a.k.a promisc mode), second, other network adapters or devices have to send traffic to Mole IDS, normally that can be done by using a port mirror or a span port. {{ image }} Once the traffic is read Mole IDS analyze it based on rules so if there is a match Mole IDS will fire an alert. Imagine you want to be alerted when some packet uses a source port 31337 so you will need to write a rule that indicates to Mole IDS something like when you see a network packet with its source port equal to 31337 , fire an alert . Quite simple, right? The last part of an IDS are the rules. Each IDS uses its own type of rules, others share the rule types and that's okay. Mole IDS uses its own rule type, well to be honest we did not invented the rule type we are using, but it is quite different from the others. Mole IDS uses Yara . We have designed a specific set of metadata for the Yara rules that allows Mole IDS identifies from which traffic you want to be alerted.","title":"Concepts"},{"location":"getting-started/concepts/#concepts","text":"Everything You Need to Know We are sure most of the Mole users already know mostly everything regarding Network Intrusion Detection Systems, as well as the network patterns to capture network traffic. However, people camming in to cybersecurity may need some initial guiadence to start capturing traffic. Mode IDS is an application that reads network traffic in a promiscuous way, that means Mole IDS can read network traffic even when that traffic is not addressed to be read by Mole IDS. That can be achieved first by configuring the netwotk addapter in monitor mode (a.k.a promisc mode), second, other network adapters or devices have to send traffic to Mole IDS, normally that can be done by using a port mirror or a span port. {{ image }} Once the traffic is read Mole IDS analyze it based on rules so if there is a match Mole IDS will fire an alert. Imagine you want to be alerted when some packet uses a source port 31337 so you will need to write a rule that indicates to Mole IDS something like when you see a network packet with its source port equal to 31337 , fire an alert . Quite simple, right? The last part of an IDS are the rules. Each IDS uses its own type of rules, others share the rule types and that's okay. Mole IDS uses its own rule type, well to be honest we did not invented the rule type we are using, but it is quite different from the others. Mole IDS uses Yara . We have designed a specific set of metadata for the Yara rules that allows Mole IDS identifies from which traffic you want to be alerted.","title":"Concepts"},{"location":"getting-started/configuration-overview/","text":"Configuration Introduction \u00b6 How the Magic Happens Mole IDS can be configured issuing arguments when you execute Mole IDS form the command line. But, you can also use a configuration file, which will make your life a little bit easy. Mole IDS uses a YAML file to define its options and it is called mole.yml . mole.yml can be placed next to the Mole IDS binary or in /etc/mole/mole.yml . Although, you can also define the mole.yml location using the command line flag --config <path> . Mole IDS configuration falg ./mole --config <path_to_mole.yml> ids --iface ens33 At the moment the configuration file is splited up in four sections: interface: Configuration related to the interface. engine: Configuration related to the engine. rules: Rules related options. logger: logger configurations. Interface \u00b6 The interface section indicates which interface will be used by Mole IDS, if the want to use PF_RING features or you can define a BPF filter. interface: iface: ens33 pf_ring: true bpf: udp and dst port not 53 On the previous example Mole will listen traffic from the ens33 interface. PF_RING will be used as capturing driver and only the traffic defined in the bpf filter will be captured. When setting interface.pf_ring to false Mole IDS will use libpcap to capture packages from the interface. If Mole IDS was compiled without PF_Ring support and you configure it to use the PF_Ring driver, Mole IDS will fall down to libpcap. engine \u00b6 The engine sections has no options at the moment, this section is defined for future purposes. rules \u00b6 This section defines where and how the Yara rules should be loaded. In this secction we defined two entry for loading the rules, one for loading them from a directory so Mole IDS will load all *.yar files in that folder without recursion. Second, you can provide a Yara rules index file and Mole will load those rules. Moreover, there is a section for the user to define a set of variables. Those variables can be used later on in the rules. rules: rules_dir: ./rules rules_index: ./index.yar variables: $HOME_NET: \"10.0.0.0/8\" If you are wondering yourself how to use the variables, I'll show you down below, but if you want to know more about rules, pleae go to writing rules section. rule ExampleRule { meta: type = \"alert\" proto = \"tcp\" src = \"$HOME_NET\" sport = \"any\" dst = \"any\" sport = \"80\" strings: $host = \"google.com\" condition: $host } logger \u00b6 Finally, we defined a logging section. This section defines two types of logger, the first one is for Mole IDS where Mole IDS will log all the internal messages, on the other hand, the sencod type of log is for the Mole IDS users. That log will contain a JSON object with the matching alert information. logger: log_to: /dev/stdout log_level: \"info\" mole: format: eve to: /var/log/mole/alert.json log_to and log_level indicates to Mole IDS where and in which level should log the internal stuff. On th other hand, there is a mole entry where the alert logs are defined. mole.format is used to output the alerts in different formats and mole.to indicates where Mole IDS will write the alerts. Warning At the moment there is one unique format avaliable, which is eve . That format writes the logs in JSON format, but the content of the logs mimics the eve.json format from Suticata IDS . Following there is an example of an alert output. { \"level\": \"info\", \"ts\": 1594760683.2996953, \"msg\": \"mole\", \"mole_event\": { \"timestamp\": \"2020-07-14T23:04:42.919469+0200\", \"event_type\": \"alert\", \"in_iface\": \"ens33\", \"src_ip\": \"172.16.150.208/32\", \"src_port\": 6009, \"dst_ip\": \"216.58.211.46/32\", \"dst_port\": 80, \"proto\": \"tcp\", \"alert\": { \"name\": \"HTTPGetGoogle\", \"id\": \"\", \"tags\": [ \"tcp\", \"http\" ], \"meta\": { \"description\": \"Detect http get method to google.com\", \"type\": \"alert\", \"proto\": \"tcp\", \"src\": \"172.16.0.0/16\", \"sport\": \"0:65535\", \"dst\": \"0.0.0.0/0\", \"dport\": \"80\" } }, \"matches\": [ { \"name\": \"$method\", \"data\": \"R0VU\", \"base\": 0, \"offset\": 0 }, { \"name\": \"$host\", \"data\": \"Z29vZ2xlLmNvbQ==\", \"base\": 0, \"offset\": 22 } ] } } Full example \u00b6 interface: iface: ens33 pf_ring: true bpf: udp and dst port not 53 engine: rules: rules_dir: ./rules rules_index: ./index.yar variables: $HOME_NET: \"10.0.0.0/8\" logger: log_to: /dev/stdout log_level: \"info\" mole: format: eve to: /var/log/mole/alert.json","title":"Configuration Introduction"},{"location":"getting-started/configuration-overview/#configuration-introduction","text":"How the Magic Happens Mole IDS can be configured issuing arguments when you execute Mole IDS form the command line. But, you can also use a configuration file, which will make your life a little bit easy. Mole IDS uses a YAML file to define its options and it is called mole.yml . mole.yml can be placed next to the Mole IDS binary or in /etc/mole/mole.yml . Although, you can also define the mole.yml location using the command line flag --config <path> . Mole IDS configuration falg ./mole --config <path_to_mole.yml> ids --iface ens33 At the moment the configuration file is splited up in four sections: interface: Configuration related to the interface. engine: Configuration related to the engine. rules: Rules related options. logger: logger configurations.","title":"Configuration Introduction"},{"location":"getting-started/configuration-overview/#interface","text":"The interface section indicates which interface will be used by Mole IDS, if the want to use PF_RING features or you can define a BPF filter. interface: iface: ens33 pf_ring: true bpf: udp and dst port not 53 On the previous example Mole will listen traffic from the ens33 interface. PF_RING will be used as capturing driver and only the traffic defined in the bpf filter will be captured. When setting interface.pf_ring to false Mole IDS will use libpcap to capture packages from the interface. If Mole IDS was compiled without PF_Ring support and you configure it to use the PF_Ring driver, Mole IDS will fall down to libpcap.","title":"Interface"},{"location":"getting-started/configuration-overview/#engine","text":"The engine sections has no options at the moment, this section is defined for future purposes.","title":"engine"},{"location":"getting-started/configuration-overview/#rules","text":"This section defines where and how the Yara rules should be loaded. In this secction we defined two entry for loading the rules, one for loading them from a directory so Mole IDS will load all *.yar files in that folder without recursion. Second, you can provide a Yara rules index file and Mole will load those rules. Moreover, there is a section for the user to define a set of variables. Those variables can be used later on in the rules. rules: rules_dir: ./rules rules_index: ./index.yar variables: $HOME_NET: \"10.0.0.0/8\" If you are wondering yourself how to use the variables, I'll show you down below, but if you want to know more about rules, pleae go to writing rules section. rule ExampleRule { meta: type = \"alert\" proto = \"tcp\" src = \"$HOME_NET\" sport = \"any\" dst = \"any\" sport = \"80\" strings: $host = \"google.com\" condition: $host }","title":"rules"},{"location":"getting-started/configuration-overview/#logger","text":"Finally, we defined a logging section. This section defines two types of logger, the first one is for Mole IDS where Mole IDS will log all the internal messages, on the other hand, the sencod type of log is for the Mole IDS users. That log will contain a JSON object with the matching alert information. logger: log_to: /dev/stdout log_level: \"info\" mole: format: eve to: /var/log/mole/alert.json log_to and log_level indicates to Mole IDS where and in which level should log the internal stuff. On th other hand, there is a mole entry where the alert logs are defined. mole.format is used to output the alerts in different formats and mole.to indicates where Mole IDS will write the alerts. Warning At the moment there is one unique format avaliable, which is eve . That format writes the logs in JSON format, but the content of the logs mimics the eve.json format from Suticata IDS . Following there is an example of an alert output. { \"level\": \"info\", \"ts\": 1594760683.2996953, \"msg\": \"mole\", \"mole_event\": { \"timestamp\": \"2020-07-14T23:04:42.919469+0200\", \"event_type\": \"alert\", \"in_iface\": \"ens33\", \"src_ip\": \"172.16.150.208/32\", \"src_port\": 6009, \"dst_ip\": \"216.58.211.46/32\", \"dst_port\": 80, \"proto\": \"tcp\", \"alert\": { \"name\": \"HTTPGetGoogle\", \"id\": \"\", \"tags\": [ \"tcp\", \"http\" ], \"meta\": { \"description\": \"Detect http get method to google.com\", \"type\": \"alert\", \"proto\": \"tcp\", \"src\": \"172.16.0.0/16\", \"sport\": \"0:65535\", \"dst\": \"0.0.0.0/0\", \"dport\": \"80\" } }, \"matches\": [ { \"name\": \"$method\", \"data\": \"R0VU\", \"base\": 0, \"offset\": 0 }, { \"name\": \"$host\", \"data\": \"Z29vZ2xlLmNvbQ==\", \"base\": 0, \"offset\": 22 } ] } }","title":"logger"},{"location":"getting-started/configuration-overview/#full-example","text":"interface: iface: ens33 pf_ring: true bpf: udp and dst port not 53 engine: rules: rules_dir: ./rules rules_index: ./index.yar variables: $HOME_NET: \"10.0.0.0/8\" logger: log_to: /dev/stdout log_level: \"info\" mole: format: eve to: /var/log/mole/alert.json","title":"Full example"},{"location":"getting-started/install-mole/","text":"Install Mole \u00b6 Getting Mole IDS From The Soruce At the moment Mole IDS is tested under Ubuntu and Debian as Mole IDS is programed in Golang we suspect you can build Mole almost on any Linux box. However, the Mole IDS team is working to port Mole to the major platforms. Mole IDS Dependencies & Requirements Mole IDS is build upon two libraries and they have to be installed on the system you want to run Mole IDS. Yara PF_RING Down below is the whole intallation process so please follow up the process and everything will be fine. Pre-requisites \u00b6 The following packages are needed to compile Yara and PF_RING. sudo apt install build-essential \\ pkg-config \\ autoconf \\ automake \\ libtool \\ bison \\ flex \\ make \\ gcc \\ libjansson-dev \\ libmagic-dev Install Golang \u00b6 Install Golang from package repository Ubuntu sudo add-apt-repository ppa:longsleep/golang-backports sudo apt update sudo apt install golang-go Debian sudo apt update sudo apt install golang-go Install Golang manually Golang can be downlaoded from https://golang.org/dl/ and configure it following the steps in https://golang.org/doc/install . To compile Mole IDS you only need to define the GOPATH and GOBIN environment variables according to your needs. Install PF_RING \u00b6 PF_RING has 4 parts that need to be compiled and installed separately. git clone https://github.com/ntop/PF_RING.git cd PF_RING/kernel/ make && sudo make install cd ../userland/lib ./configure --prefix=/usr/local/pfring && make && sudo make install cd ../libpcap ./configure --prefix=/usr/local/pfring && make && sudo make install cd ../tcpdump ./configure --prefix=/usr/local/pfring && make && sudo make install sudo ldconfig echo 'export CGO_LDFLAGS=\"-L/usr/local/pfring/lib/\"' >> $HOME/.bash_profile echo 'export CGO_CFLAGS=\"-I/usr/local/pfring/include/\"' >> $HOME/.bash_profile source $HOME/.bash_profile Load PF_RING \u00b6 sudo modprobe pf_ring echo pf_ring | sudo tee -a /etc/modules Install Yara \u00b6 At the moment Mole IDS uses Yara version 3.11.0. We know there is a newer version of Yara and we will added asoon as possible. wget https://github.com/VirusTotal/yara/archive/v3.11.0.tar.gz -O yara.tgz tar xvfz yara.tgz cd yara-3.11.0 ./bootstrap.sh ./configure --enable-magic make sudo make install Install \u00b6 First of all you need to clone or download Mode IDS project from Github . Once you have the source code it should be placed at $GOPATH/src/github.com/mole-ids/mole , that way everything will work as expected. Mole IDS can be installed under %GOBIN% by using the Golang installer feature. We wrapped that command behind the following command. make install Build \u00b6 On the other hand, you can build Mole for your platform by using the build make command. This command will leave the Mole IDS executable under <project_path>/build/ . make build","title":"Install Mole"},{"location":"getting-started/install-mole/#install-mole","text":"Getting Mole IDS From The Soruce At the moment Mole IDS is tested under Ubuntu and Debian as Mole IDS is programed in Golang we suspect you can build Mole almost on any Linux box. However, the Mole IDS team is working to port Mole to the major platforms. Mole IDS Dependencies & Requirements Mole IDS is build upon two libraries and they have to be installed on the system you want to run Mole IDS. Yara PF_RING Down below is the whole intallation process so please follow up the process and everything will be fine.","title":"Install Mole"},{"location":"getting-started/install-mole/#pre-requisites","text":"The following packages are needed to compile Yara and PF_RING. sudo apt install build-essential \\ pkg-config \\ autoconf \\ automake \\ libtool \\ bison \\ flex \\ make \\ gcc \\ libjansson-dev \\ libmagic-dev","title":"Pre-requisites"},{"location":"getting-started/install-mole/#install-golang","text":"Install Golang from package repository Ubuntu sudo add-apt-repository ppa:longsleep/golang-backports sudo apt update sudo apt install golang-go Debian sudo apt update sudo apt install golang-go Install Golang manually Golang can be downlaoded from https://golang.org/dl/ and configure it following the steps in https://golang.org/doc/install . To compile Mole IDS you only need to define the GOPATH and GOBIN environment variables according to your needs.","title":"Install Golang"},{"location":"getting-started/install-mole/#install-pf_ring","text":"PF_RING has 4 parts that need to be compiled and installed separately. git clone https://github.com/ntop/PF_RING.git cd PF_RING/kernel/ make && sudo make install cd ../userland/lib ./configure --prefix=/usr/local/pfring && make && sudo make install cd ../libpcap ./configure --prefix=/usr/local/pfring && make && sudo make install cd ../tcpdump ./configure --prefix=/usr/local/pfring && make && sudo make install sudo ldconfig echo 'export CGO_LDFLAGS=\"-L/usr/local/pfring/lib/\"' >> $HOME/.bash_profile echo 'export CGO_CFLAGS=\"-I/usr/local/pfring/include/\"' >> $HOME/.bash_profile source $HOME/.bash_profile","title":"Install PF_RING"},{"location":"getting-started/install-mole/#load-pf_ring","text":"sudo modprobe pf_ring echo pf_ring | sudo tee -a /etc/modules","title":"Load PF_RING"},{"location":"getting-started/install-mole/#install-yara","text":"At the moment Mole IDS uses Yara version 3.11.0. We know there is a newer version of Yara and we will added asoon as possible. wget https://github.com/VirusTotal/yara/archive/v3.11.0.tar.gz -O yara.tgz tar xvfz yara.tgz cd yara-3.11.0 ./bootstrap.sh ./configure --enable-magic make sudo make install","title":"Install Yara"},{"location":"getting-started/install-mole/#install","text":"First of all you need to clone or download Mode IDS project from Github . Once you have the source code it should be placed at $GOPATH/src/github.com/mole-ids/mole , that way everything will work as expected. Mole IDS can be installed under %GOBIN% by using the Golang installer feature. We wrapped that command behind the following command. make install","title":"Install"},{"location":"getting-started/install-mole/#build","text":"On the other hand, you can build Mole for your platform by using the build make command. This command will leave the Mole IDS executable under <project_path>/build/ . make build","title":"Build"},{"location":"getting-started/quick-start/","text":"Quick Start \u00b6 Catch It Now First of all you need a copy of Mole IDS and a Linux box. At the moment we only provide you with the source files so you will have to compile Mole IDS by your own. However, we eased that process as much as we could. Please go to Install-Mole to install Mole IDS. Once you have Mole IDS installed you are ready to capture traffic. You must run Mole IDS as root using the following command: ./mole ids --iface <iface> --rulesDir <path> In the previous command you need to adjust the interface where the traffic will come into Mole IDS and a Yara rules directory. Mole will log everything in the console and you can imagine that is not really handy, thus you can provide some arguments to change that behaviour. You must know that Mole IDS has two types of logs, the first one is for logging the application messages and the second one is for logging the events triggered by the rules. ./mole ids --iface <iface> --rulesDir <path> --logTo <file> --moleLogTo <file> In the previous command --logTo is used to log Mole IDS events and --moleLogTo is used to log the alerts based on the rules.","title":"Quick Start"},{"location":"getting-started/quick-start/#quick-start","text":"Catch It Now First of all you need a copy of Mole IDS and a Linux box. At the moment we only provide you with the source files so you will have to compile Mole IDS by your own. However, we eased that process as much as we could. Please go to Install-Mole to install Mole IDS. Once you have Mole IDS installed you are ready to capture traffic. You must run Mole IDS as root using the following command: ./mole ids --iface <iface> --rulesDir <path> In the previous command you need to adjust the interface where the traffic will come into Mole IDS and a Yara rules directory. Mole will log everything in the console and you can imagine that is not really handy, thus you can provide some arguments to change that behaviour. You must know that Mole IDS has two types of logs, the first one is for logging the application messages and the second one is for logging the events triggered by the rules. ./mole ids --iface <iface> --rulesDir <path> --logTo <file> --moleLogTo <file> In the previous command --logTo is used to log Mole IDS events and --moleLogTo is used to log the alerts based on the rules.","title":"Quick Start"}]}